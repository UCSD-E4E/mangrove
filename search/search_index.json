{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the E4E Mangrove Monitoring Documentation Hub! Github For all code references, please go to the Github repositories below General Tools and Documentation: https://github.com/UCSD-E4E/mangrove Machine Learning Development: https://github.com/UCSD-E4E/ml-mangrove Image Classification Tool: https://github.com/UCSD-E4E/web-mangrove Image Labeling Tool: https://github.com/UCSD-E4E/labeling-mangrove Biomass Estimation: https://github.com/UCSD-E4E/biomass-mangrove Current Team Dillon Hicks Kathy Qi Arden Ma Technical Lead Biomass UNet Segmentation /CNN Matthew Ma Ashlesha Vaidya David Forman - REU UNet Segmentation Semi-Supervised Segmentation Labeling Tool Nicole Meister - REU Samuel Cole - REU Thuan Do - HS Image Classification Tool UNet Segmentation PI's and Collaborators/Mentors E4E (JSOE) Ryan Kastner Curt Schurgers Eric Lo Aburto Lab (SIO) Octavio Aburto Astrid Hsu John Dorian","title":"Home"},{"location":"#welcome-to-the-e4e-mangrove-monitoring-documentation-hub","text":"","title":"Welcome to the E4E Mangrove Monitoring Documentation Hub!"},{"location":"#github","text":"For all code references, please go to the Github repositories below General Tools and Documentation: https://github.com/UCSD-E4E/mangrove Machine Learning Development: https://github.com/UCSD-E4E/ml-mangrove Image Classification Tool: https://github.com/UCSD-E4E/web-mangrove Image Labeling Tool: https://github.com/UCSD-E4E/labeling-mangrove Biomass Estimation: https://github.com/UCSD-E4E/biomass-mangrove","title":"Github"},{"location":"#current-team","text":"Dillon Hicks Kathy Qi Arden Ma Technical Lead Biomass UNet Segmentation /CNN Matthew Ma Ashlesha Vaidya David Forman - REU UNet Segmentation Semi-Supervised Segmentation Labeling Tool Nicole Meister - REU Samuel Cole - REU Thuan Do - HS Image Classification Tool UNet Segmentation","title":"Current Team"},{"location":"#pis-and-collaboratorsmentors","text":"E4E (JSOE) Ryan Kastner Curt Schurgers Eric Lo Aburto Lab (SIO) Octavio Aburto Astrid Hsu John Dorian","title":"PI's and Collaborators/Mentors"},{"location":"About/","text":"What is the Mangrove Monitoring Project? What are mangroves? Mangroves are a very valuable and understudied plant species. They provide $100,000 per hectare per year in services that are critical to the overall health of coastal ecosystems. Mangroves act as fishery habitats, they sequester carbon, filter runoff, and protect coastlines from hurricanes.","title":"About"},{"location":"About/#what-is-the-mangrove-monitoring-project","text":"","title":"What is the Mangrove Monitoring Project?"},{"location":"About/#what-are-mangroves","text":"Mangroves are a very valuable and understudied plant species. They provide $100,000 per hectare per year in services that are critical to the overall health of coastal ecosystems. Mangroves act as fishery habitats, they sequester carbon, filter runoff, and protect coastlines from hurricanes.","title":"What are mangroves?"},{"location":"Azure%20Slackbot/","text":"Mangrove Azure Updates Mangrove Azure Updates is a slack app developed to make it easier to manage VMs used for data processing and to recieved status updates on those VMs. Turning on and off VMs You can turn of VMs using the commands given below. You can type any of the below commands to turn on and off a specific VM in any channel. Note: After you type in the above commands, wait at least a minute before trying to log into the VM, as it needs time to start up! If the request to start the VM is successful, you should get a message that is visible only to you, with the specific job id of the VM startup job given to Azure. Below is an example message of one that you should recieve upon a successful job request. Autoshutdown Each VM is set to shut down every midnight (12:00 AM PST). If you are doing overnight processing, make sure to go to the #azure channel in order to see updates on automatic shutdowns. Below is an example image for a VM that is left on. This automatic message will be posted 30 minutes before shutdown, (~11:30 PM PST) , so make sure to stay online to ensure that you can see this message. You can either skip the automatic shutdown, with the VM staying on until the next automatic shutdown. If you just need time to save your work and shut down, you can also delay the automatic shutdown by 1 or two hours by clicking on the links in the message sent by @Mangrove Azure Updates. Author Email Dillon Hicks sdhicks@ucsd.edu","title":"Azure Slack Bot"},{"location":"Azure%20Slackbot/#mangrove-azure-updates","text":"Mangrove Azure Updates is a slack app developed to make it easier to manage VMs used for data processing and to recieved status updates on those VMs.","title":"Mangrove Azure Updates"},{"location":"Azure%20Slackbot/#turning-on-and-off-vms","text":"You can turn of VMs using the commands given below. You can type any of the below commands to turn on and off a specific VM in any channel. Note: After you type in the above commands, wait at least a minute before trying to log into the VM, as it needs time to start up! If the request to start the VM is successful, you should get a message that is visible only to you, with the specific job id of the VM startup job given to Azure. Below is an example message of one that you should recieve upon a successful job request.","title":"Turning on and off VMs"},{"location":"Azure%20Slackbot/#autoshutdown","text":"Each VM is set to shut down every midnight (12:00 AM PST). If you are doing overnight processing, make sure to go to the #azure channel in order to see updates on automatic shutdowns. Below is an example image for a VM that is left on. This automatic message will be posted 30 minutes before shutdown, (~11:30 PM PST) , so make sure to stay online to ensure that you can see this message. You can either skip the automatic shutdown, with the VM staying on until the next automatic shutdown. If you just need time to save your work and shut down, you can also delay the automatic shutdown by 1 or two hours by clicking on the links in the message sent by @Mangrove Azure Updates. Author Email Dillon Hicks sdhicks@ucsd.edu","title":"Autoshutdown"},{"location":"CNN/","text":"CNN Tile Based Classification Tensorflow 2.0 Notebooks Upgrades to Tensorflow 2.0 brings much more optimization compared to Tensorflow 1.0 and many more models, Seeing up to 10x increases in classification speeds, plus the code is much easier to read and know what is going on! View the below notebooks to get an intro into the code Retrain (TF2 Notebook) Autoclass (TF2 Notebook)","title":"CNN"},{"location":"CNN/#cnn-tile-based-classification","text":"","title":"CNN Tile Based Classification"},{"location":"CNN/#tensorflow-20-notebooks","text":"Upgrades to Tensorflow 2.0 brings much more optimization compared to Tensorflow 1.0 and many more models, Seeing up to 10x increases in classification speeds, plus the code is much easier to read and know what is going on! View the below notebooks to get an intro into the code","title":"Tensorflow 2.0 Notebooks"},{"location":"CNN/#retrain-tf2-notebook","text":"","title":"Retrain (TF2 Notebook)"},{"location":"CNN/#autoclass-tf2-notebook","text":"","title":"Autoclass (TF2 Notebook)"},{"location":"GIS%20Utils/","text":"Introduction GIS Utils is a python package aimed to improve on many of the inabilities of GDAL Python scripts to be faster, properly multithreaded, and much easier to use with a ML workflow than GDAL on its own. GIS Utils provides a few high level abstractions of GIS workflows aimed to be used for ML workflows, such as tilizing of images, raster to image conversions, and a few other tools specific to our workflow in particular. Requirements In order to use GIS Utils, the below python libraries must be installed: rasterio fiona geopandas gdal We reccomending using Google Colab or an Anaconda Environment as this package also requires many of the packages preincluded in those environments: tqdm numpy pandas For your convenience, we have a series of pip and apt-get commands that you can use below in order to download all of the prerequisite packages for GIS Utils. !apt-get update !apt-get install libgdal-dev -y !apt-get install python-gdal -y !apt-get install python-numpy python-scipy -y !pip install rasterio !pip install fiona !pip install geopandas General Tools load_image() load_image is intended as a quick wrapper to of some rasterio functions to directly get the generator of the image and some of the metainformation of the original image. This function should typically be used in order to Inputs: file - Filelocation of input raster Outputs: img - Image generator from the specified input raster meta - Meta information from the specified input raster get_area() get_area simply gets the area from an input shapefile with the specified CRS from a geopandas dataframe of an input shapefile. Inputs: gpd_df - Filelocation of input raster crs - Projection for which to find the area - note the resulting area can differ greatly between different types of projections, so try to use the same projection in your further calculations. Defaults to EPSG 3857 ( 'epsg:3857' ). Outputs: The area of the polygon(s) in m^2. In order to convert this to km^2, divide this number by 10**6. Retiling Rasters retile() Retile is aimed to be a faster, easier to use version of gdal_retile.py , being able to be used in the form of a python function, and easily transferred to be used in an application or with argparse. It has the ability to output both a numpy array of the original raster, and the ability to save the resulting tiles. Retile is multithreaded, meaning it is much faster than it's older gdal sibling, which unfortunately only runs on 1 thread. Just to give a comparison, this implementation is quicker than gdal_retile.py , especially when you don't save output files and have more threads to access! Type Time gdal_retile.py 13 sec retile() (files = True) 12.5 sec retile() (files = False) 8.25 sec Inputs: img - Image generator from the specified input raster - from load_image meta - Meta information from the specified input raster - from load_image out_path - Output path for image tiles, note that you need to create this folder - defaults to 'images/' files - Whether to output image tiles to the specified out_path - defaults to False width - Width of output tiles in pixels - defaults to 256 height - Height of output tiles in pixels - defaults to 256 Outputs: results - Numpy array containing tiles Example Usage: file = \"lap_2018-07_site05_120m_RGB_cc.tif\" img, meta = load_image(file) results = generate_tiles(img,meta,files=False) get_tiles() Get tiles is a function to generate the bounds of the image tiles generated in retile . Inputs: ds - Image generator from the specified input raster - from load_image width - Width of output tiles in pixels - defaults to 256 height - Height of output tiles in pixels - defaults to 256 Outputs: out_window, out_transform - A tuple of lists, with each list containing each tiles respective window and transform Example Usage: window, transform = get_tiles(img, width, height) tile = img.read(window=window) Polygonizing Rasters polygonize() Polygonize is intended to be a much faster implementation of gdal_polygonize.py . I'm not going to bring out a chart like I did with retile , but expect 30x increases in processing time compared to gdal_polygonize.py :). Inputs: img : Image generator from the specified input raster - from load_image out_file : Output filename of shapefile to write band : Band in which to make polygons from - defaults to 4 (Alpha layer) Outputs: geopandas_df : Geopandas dataframe containing the geometries from the input raster band Example Usage: file = \"/content/downsampled_m_psc_2018-05_site09_120m_RGB.tif\" img, meta = load_image(file) df = polygonize(img, out_file=\"/content/test.shp\", band=4) Fixing Polygonized Rasters: When generating polygons from the alpha layer, our scripts will generate polygons for all pixel values in the original raster (ex. will make polygons for 0 and 255 alpha values), so the functions below are aimed to fix these and only generate polygons for the specified class of polygons. fix_shp() This is used for the above \"fixing\" of polygons created from polygonize() as explained above. Inputs: shp : geopandas dataframe of the shapefile outputted from polygonize() filename : of input shapefile from polygonize() Outputs: shp : geopandas dataframe of fixed polygons fix_gdalshp() Similarly, this is used for fixing the polygons when generated from gdal_polygonize.py Inputs: shp : geopandas dataframe of the shapefile outputted from gdal_polygonize.py filename : of input shapefile from gdal_polygonize.py Outputs: shp : geopandas dataframe of fixed polygons Downsampling Rasters downsample_raster() As the name intends, this is for downsampling rasters. This has been used previously in order to generate previews for all of our rasters in the drive that are geolocated and can easily be used for testing. Inputs: img - Image generator from the specified input raster - from load_image downscale_factor - How much to downsample (or upsample) your image. An appropriate input would be 1/25 , 1/5 , 10 , etc. out_file - Output filename of downsampled raster to write Outputs: resampled - Output numpy array of the resampled raster transform - Transform of the resampled raster Demo Notebook Author Email Dillon Hicks sdhicks@ucsd.edu","title":"GIS Utils"},{"location":"GIS%20Utils/#introduction","text":"GIS Utils is a python package aimed to improve on many of the inabilities of GDAL Python scripts to be faster, properly multithreaded, and much easier to use with a ML workflow than GDAL on its own. GIS Utils provides a few high level abstractions of GIS workflows aimed to be used for ML workflows, such as tilizing of images, raster to image conversions, and a few other tools specific to our workflow in particular.","title":"Introduction"},{"location":"GIS%20Utils/#requirements","text":"In order to use GIS Utils, the below python libraries must be installed: rasterio fiona geopandas gdal We reccomending using Google Colab or an Anaconda Environment as this package also requires many of the packages preincluded in those environments: tqdm numpy pandas For your convenience, we have a series of pip and apt-get commands that you can use below in order to download all of the prerequisite packages for GIS Utils. !apt-get update !apt-get install libgdal-dev -y !apt-get install python-gdal -y !apt-get install python-numpy python-scipy -y !pip install rasterio !pip install fiona !pip install geopandas","title":"Requirements"},{"location":"GIS%20Utils/#general-tools","text":"","title":"General Tools"},{"location":"GIS%20Utils/#load_image","text":"load_image is intended as a quick wrapper to of some rasterio functions to directly get the generator of the image and some of the metainformation of the original image. This function should typically be used in order to Inputs: file - Filelocation of input raster Outputs: img - Image generator from the specified input raster meta - Meta information from the specified input raster","title":"load_image()"},{"location":"GIS%20Utils/#get_area","text":"get_area simply gets the area from an input shapefile with the specified CRS from a geopandas dataframe of an input shapefile. Inputs: gpd_df - Filelocation of input raster crs - Projection for which to find the area - note the resulting area can differ greatly between different types of projections, so try to use the same projection in your further calculations. Defaults to EPSG 3857 ( 'epsg:3857' ). Outputs: The area of the polygon(s) in m^2. In order to convert this to km^2, divide this number by 10**6.","title":"get_area()"},{"location":"GIS%20Utils/#retiling-rasters","text":"","title":"Retiling Rasters"},{"location":"GIS%20Utils/#retile","text":"Retile is aimed to be a faster, easier to use version of gdal_retile.py , being able to be used in the form of a python function, and easily transferred to be used in an application or with argparse. It has the ability to output both a numpy array of the original raster, and the ability to save the resulting tiles. Retile is multithreaded, meaning it is much faster than it's older gdal sibling, which unfortunately only runs on 1 thread. Just to give a comparison, this implementation is quicker than gdal_retile.py , especially when you don't save output files and have more threads to access! Type Time gdal_retile.py 13 sec retile() (files = True) 12.5 sec retile() (files = False) 8.25 sec Inputs: img - Image generator from the specified input raster - from load_image meta - Meta information from the specified input raster - from load_image out_path - Output path for image tiles, note that you need to create this folder - defaults to 'images/' files - Whether to output image tiles to the specified out_path - defaults to False width - Width of output tiles in pixels - defaults to 256 height - Height of output tiles in pixels - defaults to 256 Outputs: results - Numpy array containing tiles Example Usage: file = \"lap_2018-07_site05_120m_RGB_cc.tif\" img, meta = load_image(file) results = generate_tiles(img,meta,files=False)","title":"retile()"},{"location":"GIS%20Utils/#get_tiles","text":"Get tiles is a function to generate the bounds of the image tiles generated in retile . Inputs: ds - Image generator from the specified input raster - from load_image width - Width of output tiles in pixels - defaults to 256 height - Height of output tiles in pixels - defaults to 256 Outputs: out_window, out_transform - A tuple of lists, with each list containing each tiles respective window and transform Example Usage: window, transform = get_tiles(img, width, height) tile = img.read(window=window)","title":"get_tiles()"},{"location":"GIS%20Utils/#polygonizing-rasters","text":"","title":"Polygonizing Rasters"},{"location":"GIS%20Utils/#polygonize","text":"Polygonize is intended to be a much faster implementation of gdal_polygonize.py . I'm not going to bring out a chart like I did with retile , but expect 30x increases in processing time compared to gdal_polygonize.py :). Inputs: img : Image generator from the specified input raster - from load_image out_file : Output filename of shapefile to write band : Band in which to make polygons from - defaults to 4 (Alpha layer) Outputs: geopandas_df : Geopandas dataframe containing the geometries from the input raster band Example Usage: file = \"/content/downsampled_m_psc_2018-05_site09_120m_RGB.tif\" img, meta = load_image(file) df = polygonize(img, out_file=\"/content/test.shp\", band=4)","title":"polygonize()"},{"location":"GIS%20Utils/#fixing-polygonized-rasters","text":"When generating polygons from the alpha layer, our scripts will generate polygons for all pixel values in the original raster (ex. will make polygons for 0 and 255 alpha values), so the functions below are aimed to fix these and only generate polygons for the specified class of polygons.","title":"Fixing Polygonized Rasters:"},{"location":"GIS%20Utils/#fix_shp","text":"This is used for the above \"fixing\" of polygons created from polygonize() as explained above. Inputs: shp : geopandas dataframe of the shapefile outputted from polygonize() filename : of input shapefile from polygonize() Outputs: shp : geopandas dataframe of fixed polygons","title":"fix_shp()"},{"location":"GIS%20Utils/#fix_gdalshp","text":"Similarly, this is used for fixing the polygons when generated from gdal_polygonize.py Inputs: shp : geopandas dataframe of the shapefile outputted from gdal_polygonize.py filename : of input shapefile from gdal_polygonize.py Outputs: shp : geopandas dataframe of fixed polygons","title":"fix_gdalshp()"},{"location":"GIS%20Utils/#downsampling-rasters","text":"","title":"Downsampling Rasters"},{"location":"GIS%20Utils/#downsample_raster","text":"As the name intends, this is for downsampling rasters. This has been used previously in order to generate previews for all of our rasters in the drive that are geolocated and can easily be used for testing. Inputs: img - Image generator from the specified input raster - from load_image downscale_factor - How much to downsample (or upsample) your image. An appropriate input would be 1/25 , 1/5 , 10 , etc. out_file - Output filename of downsampled raster to write Outputs: resampled - Output numpy array of the resampled raster transform - Transform of the resampled raster","title":"downsample_raster()"},{"location":"GIS%20Utils/#demo-notebook","text":"Author Email Dillon Hicks sdhicks@ucsd.edu","title":"Demo Notebook"},{"location":"Image%20Classification%20Tool/","text":"","title":"Image Classification Tool"},{"location":"Labeling%20Tool/","text":"","title":"Labeling Tool"},{"location":"Misc/","text":"","title":"Misc"},{"location":"Papers/","text":"CNN Paper - IROS 2020 (Pending) 2019 REU Final Report","title":"Papers"},{"location":"Papers/#cnn-paper-iros-2020-pending","text":"","title":"CNN Paper - IROS 2020 (Pending)"},{"location":"Papers/#2019-reu-final-report","text":"","title":"2019 REU Final Report"},{"location":"Semi-Supervised/","text":"","title":"Semi-Supervised"},{"location":"UNet/","text":"","title":"UNet"}]}